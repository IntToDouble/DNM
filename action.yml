name: "DNM Check"
description: "Checks for the specified string in changed files of a pull request and posts a comment with the results"

branding:
  icon: "minus-circle"
  color: "white"

inputs:
  search_string:
    description: "The string to search for in changed files"
    required: false
    default: "DNM"

outputs:
  found_string:
    description: "Whether the specified string was found in changed files"
  string_locations:
    description: "The locations of the specified string in changed files"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Get Changed Files
      id: get_changed_files
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files.[].path' > changed_files.txt
      shell: bash

    - name: Search for string
      id: search_custom_string
      run: |
        found_string=false
        string_locations=""
        while read file; do
          result=$(grep -n ".*${{ inputs.search_string }}.*" "$file" || true)
          echo "---------------------"
          echo "file: $file"
          echo "$result"

          while read line; do 
            echo "Line - $n"
            line_number=$(echo "$line" | cut -d ':' -f 1)
            line_content=$(echo "$line" | cut -d ':' -f 2-)
            echo "line_number: $line_number"
            echo "line_content: $line_content"

            # if [[ "$n" == "Pqr def" ]]; then
            #     echo "--- $n was found at line $i"
            # fi    
            # i=$(($i+1)); 
          done <<< "$result"

          if [[ ${#result[@]} -gt 0 ]]; then
            found_string=true
            string_locations+="${file}:\n${result[*]@Q}\n\n"
            echo "result: $result"
            for result in "${results[@]}"; do
              line_number=$(echo "$result" | cut -d ':' -f 1)
              line_content=$(echo "$result" | cut -d ':' -f 2-)
              echo "line_number: $line_number"
              echo "line_content: $line_content"
              echo "::error file=${file},line=${line_number},title=DO NOT MERGE::${line_content}"
            done
            # result=$(grep -n ".*${{ inputs.search_string }}.*" "$file" || true)
            # if [[ ! -z $result ]]; then
            # found_string=true
            # string_locations+="${file}:\n${result@Q}\n\n"
            # Annotate the file with the search results
            # echo "::error file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
            # echo "::error file=${file},title=DO NOT MERGE::${result}"
          fi
        done < changed_files.txt
        echo "FOUND_STRING=$found_string" >> "$GITHUB_ENV"
        echo "STRING_LOCATIONS=$string_locations" >> "$GITHUB_ENV"
      shell: bash

    - name: Fail if found
      if: ${{ env.FOUND_STRING == 'true' }}
      run: |
        echo -e 'Found "${{ inputs.search_string }}" in changed files:\n\n${{ env.STRING_LOCATIONS }}'
        exit 1
      shell: bash

    - name: Update or Create PR Comment
      if: ${{ github.event_name == 'pull_request' && always() }}
      uses: actions/github-script@v6
      env:
        SEARCH_STRING: ${{ inputs.search_string }}
      with:
        script: |
          const  issue_number = context.issue.number;
          const commentIdentifier = "<!-- do-not-merge-comment -->";
          const stringLocations = process.env.STRING_LOCATIONS || "";
          const searchString = process.env.SEARCH_STRING;

          if (context.eventName !== "pull_request") {
            return console.log("Skipping PR comment update. This is not a pull request.");
          }

          // Second two replaces are to fix the formatting of the string locations from the @Q expansion
          const transformedLocations = stringLocations
            .replace(/\\n/g, "\n")
            .replace(/\n\$\'/, "\n")
            .replace(/\'\n$/, "\n");

          const commentBody = (foundString, stringLocations) => {
            if (foundString) {
              return `${commentIdentifier}\n⚠️ The string \`${searchString}\` was found in the following files. Please remove all instances before merging.\n\nLocations:\n\`\`\`\n${transformedLocations}\`\`\``;
            } else {
              return `${commentIdentifier}\n✅ The \`${searchString}\` string was not found in this PR. You're good to go!`;
            }
          };

          let existingComments;

          try {
            existingComments = await github.rest.issues.listComments({
              ...context.repo,
              issue_number,
            });
          } catch (e) {
            return console.error("Error fetching existing comments", e);
          }

          const customStringCheckComment = existingComments.data.find((comment) =>
            comment.body.includes(commentIdentifier)
          );

          try {
            if (customStringCheckComment) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: customStringCheckComment?.id,
                body: commentBody(Boolean(stringLocations), stringLocations),
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                body: commentBody(Boolean(stringLocations), stringLocations),
                issue_number,
              });
            }
          } catch (e) {
            return console.error("Error updating or creating comment", e);
          }

    - name: Generate Summary
      if: ${{ always() && env.FOUND_STRING == 'true' }}
      run: |
        echo "## DO NOT MERGE Summary" >> $GITHUB_STEP_SUMMARY
        echo "Search String: \`${{ inputs.search_string }}\`" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`${{ env.STRING_LOCATIONS }}\`\`\`" >> $GITHUB_STEP_SUMMARY
      shell: bash
